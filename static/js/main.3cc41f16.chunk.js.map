{"version":3,"sources":["components/Search.js","components/Header.js","components/GambarGraf.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","title","onSubmit","e","preventDefault","props","giveId","onChange","setState","target","name","value","Fragment","this","style","searchStyle","TextField","id","label","fullWidth","variant","Button","color","type","Component","padding","headerStyle","background","textAlign","Header","GambarGraf","hoverOn","onClickNode","nodeId","onMouseOverNode","len","person","payload","friends","length","temp","i","element","elem","classes","Paper","className","paper","Grid","container","wrap","spacing","item","Avatar","xs","Typography","map","friend","key","renderIdentity","data","nodes","links","push","getColor","source","curNode","width","Box","display","flexDirection","p","m","bgcolor","config","nodeHighlightBehavior","highlightDegree","linkHighlightBehavior","automaticRearrangeAfterDropNode","node","size","highlightStrokeColor","highlightStrokeWidth","link","highlightColor","minZoom","maxZoom","height","transision","bind","hoveredNode","List","maxHeight","overflow","listStyleType","allFriend","console","log","withStyles","theme","margin","App","GetPersonWithID","a","fetch","method","json","status","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3cc41f16.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport class Search extends Component {\r\n  state = {\r\n    title: ''\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.giveId(this.state.title);\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <React.Fragment>\r\n          <form onSubmit={this.onSubmit} style={searchStyle}>\r\n            <TextField\r\n              id=\"inputField\"\r\n              name=\"title\"\r\n              label=\"Masukkan id citizen..\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={this.state.title}\r\n              onChange={this.onChange}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              { 'Search' }\r\n            </Button>\r\n          </form>\r\n        </React.Fragment>\r\n      )\r\n  }\r\n}\r\n\r\nconst searchStyle = {\r\n  padding: '10px',\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>Welcome to Avatar Star Citizen!</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n  background: '#333',\r\n  color: '#fff',\r\n  textAlign: 'center',\r\n  padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n  color: '#fff',\r\n  textDecoration: 'none'\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Graph } from \"react-d3-graph\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\n\r\nconst useStyles = (theme) => ({\r\n  paper: {\r\n    // maxWidth: 400,\r\n    margin: `${theme.spacing(1)}px auto`,\r\n    padding: theme.spacing(2),\r\n  },\r\n});\r\n\r\nclass GambarGraf extends Component {\r\n  state = {\r\n    hoverOn: null\r\n  };\r\n  \r\n  renderIdentity(elem){\r\n    const { classes } = this.props;\r\n    return (\r\n      <Paper className={classes.paper}>\r\n        <Grid container wrap=\"nowrap\" spacing={2}>\r\n          <Grid item>\r\n            <Avatar></Avatar>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Typography>\r\n              ID: { elem.id }<br/>\r\n              NAME: { elem.name }<br/>\r\n              ELEMENT: { elem.element }<br/>\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  allFriend() {\r\n    return this.props.person.payload.friends.map((friend, i) => (\r\n      <li key={i}>     \r\n        { this.renderIdentity(friend) }\r\n      </li>\r\n    ));\r\n  }\r\n  getColor(elem) {\r\n    // let elem = e.element;\r\n    if (elem == \"fire\") return \"red\";\r\n    else if (elem == \"water\") return \"blue\";\r\n    else if (elem == \"air\") return \"#b2f2ec\";\r\n    return \"yellow\";\r\n  };\r\n  hoveredNode() {\r\n    if (this.state.hoverOn === null) return <div></div>;\r\n    return (\r\n      <React.Fragment>\r\n        {/* { this.state.hoverOn.id }<br/>\r\n        { this.state.hoverOn.name }<br/>\r\n        { this.state.hoverOn.element }<br/> */}\r\n        {this.renderIdentity(this.state.hoverOn)}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  // Graph onAction\r\n  onClickNode = function(nodeId) {\r\n    this.props.giveId(nodeId);\r\n  };\r\n  onMouseOverNode = function(nodeId) {\r\n    let len = this.props.person.payload.friends.length;\r\n    let temp = null;\r\n    for (let i=0;i<len;i++) {\r\n      if (this.props.person.payload.friends[i].id == nodeId) temp = this.props.person.payload.friends[i];\r\n    }\r\n    if (temp === null) {\r\n      temp = {\r\n        id: this.props.person.payload.id,\r\n        name: this.props.person.payload.name,\r\n        element: this.props.person.payload.element,\r\n      };\r\n    }\r\n    this.setState({ hoverOn: temp })\r\n  };\r\n  \r\n  render() {\r\n    if (this.props.person) {\r\n      let data = {\r\n          nodes: [],\r\n          links: [],\r\n          // focusedNodeId: \"nodeIdToTriggerZoomAnimation\",\r\n      };\r\n      data.nodes.push(\r\n        { \r\n          id: this.props.person.payload.id, \r\n          color: this.getColor(this.props.person.payload.element),  \r\n        }\r\n        );\r\n      let len = this.props.person.payload.friends.length;\r\n      for (let i=0;i<len;i++) {\r\n        data.nodes.push(\r\n          { \r\n            id: this.props.person.payload.friends[i].id,\r\n            color: this.getColor(this.props.person.payload.friends[i].element),\r\n          }\r\n          );\r\n        data.links.push({ source: this.props.person.payload.id, target: this.props.person.payload.friends[i].id });\r\n      }\r\n      const myConfig = {\r\n          nodeHighlightBehavior: true,\r\n          highlightDegree: 1,\r\n          linkHighlightBehavior: false,\r\n          automaticRearrangeAfterDropNode: true,\r\n          node: {\r\n            size: 300,\r\n            highlightStrokeColor: \"black\",\r\n            highlightStrokeWidth: 2,\r\n          },\r\n          link: {\r\n            color: \"black\",\r\n            highlightColor: \"lightblue\",\r\n          },\r\n          minZoom: 1,\r\n          maxZoom: 1,\r\n          width: 600,\r\n          height: 400,\r\n          transision: 100,\r\n      };\r\n      const curNode = {\r\n        id: this.props.person.payload.id,\r\n        name: this.props.person.payload.name,\r\n        element: this.props.person.payload.element,\r\n      }\r\n      return (\r\n        <React.Fragment>\r\n          <div style={{ width: '100%' }}>\r\n            <Box display=\"flex\" flexDirection=\"row\" p={1} m={1} bgcolor=\"background.paper\">\r\n              <Box p={1}>\r\n                <Box display=\"flex\" flexDirection=\"column\" p={1} m={1} bgcolor=\"background.paper\">\r\n                  <Box p={1} bgcolor=\"grey.100\">\r\n                    <Graph\r\n                      id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\r\n                      data={data}\r\n                      config={myConfig}\r\n                      onClickNode={this.onClickNode.bind(this)}\r\n                      // onDoubleClickNode={this.onDoubleClickNode}\r\n                      // onRightClickNode={this.onRightClickNode}\r\n                      // onClickGraph={this.onClickGraph}\r\n                      // onClickLink={this.onClickLink}\r\n                      // onRightClickLink={this.onRightClickLink}\r\n                      onMouseOverNode={this.onMouseOverNode.bind(this)}\r\n                      // onMouseOutNode={this.onMouseOutNode}\r\n                      // onMouseOverLink={this.onMouseOverLink}\r\n                      // onMouseOutLink={this.onMouseOutLink}\r\n                      // onNodePositionChange={this.onNodePositionChange}\r\n                    />\r\n                  </Box>\r\n                  <Box p={1}>\r\n                    { this.hoveredNode() }\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n              <Box p={1}>\r\n                <Box display=\"flex\" flexDirection=\"column\" p={1} m={1} bgcolor=\"grey.300\">\r\n                  <Box p={1}>\r\n                    { this.renderIdentity(curNode) }\r\n                    <Typography variant=\"h5\">Friend List</Typography>\r\n                  </Box>\r\n                  <Box p={1} bgcolor=\"grey.700\">\r\n                    <List style={{maxHeight: 600, overflow: 'auto'}}>\r\n                      <ul style={{ listStyleType: \"none\" }}>\r\n                        { this.allFriend() }\r\n                      </ul>\r\n                    </List>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n              \r\n            </Box>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      console.log('masukelse');\r\n      return <div></div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(GambarGraf);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Search from './components/Search';\nimport About from './components/About';\nimport Header from './components/Header';\nimport GambarGraf from './components/GambarGraf'; \n\nclass App extends Component {\n  state = {\n    id: null,\n    // Pass Id\n    person: null\n  };\n  \n  GetPersonWithID = async () => {\n    const temp = await fetch(\"https://avatar.labpro.dev/friends/\" + this.state.id, {\n      method: \"GET\"\n    });\n    const json = await temp.json();\n    if (json.status === 200) this.setState({ person: json });\n  };\n\n  giveId = async title => {\n    console.log('masuk input: ', title);\n    if (title === '') return;\n    let temp = parseInt(title);\n    if (title == temp) {\n      console.log('masuk', temp);\n      await this.setState({ id: temp });\n    } else {\n    }\n    console.log('accepted request: ', this.state.id);\n    this.GetPersonWithID();\n  };\n\n  render() {\n    // return (\n    //   <Router>\n    //     <div>\n    //       <div className=\"container\">\n    //         <Header />\n    //         <Route\n    //           exact\n    //           path=\"/\"\n    //           render={props => (\n    //             <React.Fragment>\n    //               <Search giveId={this.giveId} />\n    //               <GambarGraf id={this.state.id} person={this.state.person} giveId={this.giveId} />\n    //             </React.Fragment>\n    //           )}\n    //         />\n    //         <Route path=\"/about\" component={About} />\n    //       </div>\n    //     </div>\n    //   </Router>\n    // );\n    return (\n      <React.Fragment>\n        <Header />\n        <Search giveId={this.giveId} />\n        <GambarGraf id={this.state.id} person={this.state.person} giveId={this.giveId} />\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}