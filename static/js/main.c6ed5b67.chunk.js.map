{"version":3,"sources":["components/Search.js","components/Header.js","components/GambarGraf.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","title","onSubmit","e","preventDefault","props","giveId","onChange","setState","target","name","value","Fragment","this","style","searchStyle","TextField","id","label","fullWidth","variant","Button","color","type","Component","padding","headerStyle","background","textAlign","Header","Typography","component","myConfig","node","size","link","highlightColor","minZoom","maxZoom","height","d3","linkLength","GambarGraf","hoverOn","showList","onClickNode","nodeId","onMouseOverNode","personalInfo","elem","classes","Paper","className","paper","Grid","container","wrap","spacing","item","Avatar","xs","element","data","nodes","length","width","alignContent","Box","p","display","flexDirection","m","bgcolor","renderIdentity","align","config","withStyles","theme","margin","App","person","activeLink","activeNode","links","a","temp","parseInt","updateGraph","giveNewId","newGraph","axios","get","then","res","status","pl","payload","sc","push","len","friends","i","friend","source","nactiveLink","nactiveNode","npersonalInfo","ndata","getColor","slink","linkToString","catch","error","console","log","document","Math","min","max","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c6ed5b67.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport class Search extends Component {\r\n  state = {\r\n    title: ''\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.giveId(this.state.title);\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <React.Fragment>\r\n          <form onSubmit={this.onSubmit} style={searchStyle}>\r\n            <TextField\r\n              id=\"inputField\"\r\n              name=\"title\"\r\n              label=\"Masukkan id citizen..\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={this.state.title}\r\n              onChange={this.onChange}\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              { 'Search' }\r\n            </Button>\r\n          </form>\r\n        </React.Fragment>\r\n      )\r\n  }\r\n}\r\n\r\nconst searchStyle = {\r\n  padding: '10px',\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <Typography component=\"h1\" variant=\"button\">Avatar Suspect Expander</Typography>\r\n    </header>\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n  background: '#333',\r\n  color: '#fff',\r\n  textAlign: 'center',\r\n  padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n  color: '#fff',\r\n  textDecoration: 'none'\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Graph } from \"react-d3-graph\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = (theme) => ({\r\n  paper: {\r\n    margin: `${theme.spacing(1)}px auto`,\r\n    padding: theme.spacing(2),\r\n  },\r\n});\r\nconst myConfig = {\r\n  node: {\r\n    size: 300,\r\n  },\r\n  link: {\r\n    highlightColor: \"lightblue\",\r\n  },\r\n  minZoom: 1,\r\n  maxZoom: 1,\r\n  height: 400,\r\n  d3: {\r\n    linkLength: 100,\r\n  },\r\n};\r\n\r\nclass GambarGraf extends Component {\r\n  state = {\r\n    hoverOn: null,\r\n    showList: null,\r\n  };\r\n  \r\n  renderIdentity(elem){\r\n    const { classes } = this.props;\r\n    if (elem)\r\n      return (\r\n        <Paper className={classes.paper}>\r\n          <Grid container wrap=\"nowrap\" spacing={2}>\r\n            <Grid item>\r\n              <Avatar></Avatar>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography component=\"subtitle2\" variant=\"button\">\r\n                ID: { elem.id }<br/>\r\n                NAME: { elem.name }<br/>\r\n                ELEMENT: { elem.element }<br/>\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      );\r\n    else\r\n      return (\r\n        <Paper className={classes.paper}>\r\n          <Grid container wrap=\"nowrap\" spacing={2}>\r\n            <Grid item>\r\n              <Avatar></Avatar>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Typography>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      );\r\n  }\r\n  onClickNode = (nodeId) => {\r\n    this.props.giveId(nodeId);\r\n  };\r\n  onMouseOverNode = (nodeId) => {\r\n    this.setState({ hoverOn: this.props.personalInfo[nodeId] })\r\n    this.setState({ showList: nodeId });\r\n  };\r\n  \r\n  render() {\r\n    if (this.props.data.nodes.length === 0) return <div></div>;\r\n      \r\n    return (\r\n      <React.Fragment>\r\n        <div style={{ width: '100%', alignContent: 'center' }}>\r\n        <Box p={1} alignContent=\"center\">\r\n          <Box display=\"flex\" flexDirection=\"column\" p={1} m={1} bgcolor=\"background.paper\">\r\n            <Box p={1}>\r\n              { this.renderIdentity(this.state.hoverOn) }\r\n            </Box>\r\n            <Box p={1}>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" align=\"left\">\r\n                tips: click node to expand\r\n              </Typography>\r\n            </Box>\r\n            <Box p={1} bgcolor=\"grey.100\">\r\n              <Graph\r\n                id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\r\n                data={this.props.data}\r\n                config={myConfig}\r\n                onClickNode={this.onClickNode}\r\n                onMouseOverNode={this.onMouseOverNode}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(GambarGraf);","import React, { Component } from 'react';\nimport Search from './components/Search';\nimport Header from './components/Header';\nimport GambarGraf from './components/GambarGraf'; \nimport axios from 'axios';\n\nclass App extends Component {\n  state = {\n    id: null,\n    person: null,\n    activeLink: {},\n    activeNode: {},\n    personalInfo: {},\n    data: {\n      nodes: [],\n      links: [],\n    },\n  };\n  componentDidMount(){\n    document.title = \"Avatar Suspect Expander\";\n  }\n  \n  getColor(elem) {\n    if (elem === \"fire\") return \"red\";\n    else if (elem === \"water\") return \"blue\";\n    else if (elem === \"air\") return \"#b2f2ec\";\n    return \"yellow\";\n  };\n\n  linkToString(link) { // Canonical form\n    let a = Math.min(link.source, link.target);\n    let b = Math.max(link.source, link.target);\n    return a + \" \" + b;\n  }\n\n  giveId = async title => {\n    if (title === '') return;\n    let temp = parseInt(title);\n    if (title == temp) {\n      await this.setState({ id: temp });\n    } else return;\n    this.updateGraph();\n  };\n\n  giveNewId = async title => {\n    if (title === '') return;\n    let temp = parseInt(title);\n    if (title == temp) {\n      await this.setState({ id: temp });\n    } else return;\n    this.newGraph();\n  };\n\n  newGraph = () => {\n    axios.get(\"https://avatar.labpro.dev/friends/\" + this.state.id)\n      .then(res => {\n        if (res.data.status === 200) {\n          let pl = res.data.payload;\n          this.setState({ activeLink: {} });\n          this.setState({ activeNode: {} });\n          this.setState({ personalInfo: {} });\n          this.setState({ data: {nodes: [], links: []} });\n  \n          let nodes = [];\n          let links = [];\n          let sc = { id: pl.id, name: pl.name, element: pl.element };\n          nodes.push(sc);\n          let len = pl.friends.length;\n          for (let i=0;i<len;i++) {\n            let friend = pl.friends[i];\n            nodes.push(friend);\n            links.push({ source: sc.id, target: friend.id });\n          }\n\n          let nactiveLink = this.state.activeLink;\n          let nactiveNode = this.state.activeNode;\n          let npersonalInfo = this.state.personalInfo;\n          let ndata = this.state.data;\n          \n          len = nodes.length;\n          for (let i=0;i<len;i++) {\n            let node = nodes[i];\n            if (nactiveNode[node.id]) continue;\n            nactiveNode[node.id] = true;\n            npersonalInfo[node.id] = node;\n            ndata.nodes.push({ id: node.id, color: this.getColor(node.element) });\n          }\n          len = links.length;\n          for (let i=0;i<len;i++) {\n            let link = links[i];\n            let slink = this.linkToString(link);\n            if (nactiveLink[slink]) continue;\n            nactiveLink[slink] = true;\n            ndata.links.push(link);\n          }\n          this.setState({ activeLink: nactiveLink });\n          this.setState({ activeNode: nactiveNode });\n          this.setState({ personalInfo: npersonalInfo });\n          this.setState({ data: ndata });\n        }\n      })\n      .catch((error) =>{\n        console.log(error);\n      });\n  };\n  updateGraph = () => {\n    axios.get(\"https://avatar.labpro.dev/friends/\" + this.state.id)\n      .then(res => {\n        if (res.data.status === 200) {\n          let pl = res.data.payload;\n  \n          let nodes = [];\n          let links = [];\n          let sc = { id: pl.id, name: pl.name, element: pl.element };\n          nodes.push(sc);\n          let len = pl.friends.length;\n          for (let i=0;i<len;i++) {\n            let friend = pl.friends[i];\n            nodes.push(friend);\n            links.push({ source: sc.id, target: friend.id });\n          }\n\n          let nactiveLink = this.state.activeLink;\n          let nactiveNode = this.state.activeNode;\n          let npersonalInfo = this.state.personalInfo;\n          let ndata = this.state.data;\n          \n          len = nodes.length;\n          for (let i=0;i<len;i++) {\n            let node = nodes[i];\n            if (nactiveNode[node.id]) continue;\n            nactiveNode[node.id] = true;\n            npersonalInfo[node.id] = node;\n            ndata.nodes.push({ id: node.id, color: this.getColor(node.element) });\n          }\n          len = links.length;\n          for (let i=0;i<len;i++) {\n            let link = links[i];\n            let slink = this.linkToString(link);\n            if (nactiveLink[slink]) continue;\n            nactiveLink[slink] = true;\n            ndata.links.push(link);\n          }\n          this.setState({ activeLink: nactiveLink });\n          this.setState({ activeNode: nactiveNode });\n          this.setState({ personalInfo: npersonalInfo });\n          this.setState({ data: ndata });\n        }\n      })\n      .catch((error) =>{\n        console.log(error);\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Search giveId={this.giveNewId} />\n        <GambarGraf giveId={this.giveId} personalInfo={this.state.personalInfo} data={this.state.data} />\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}